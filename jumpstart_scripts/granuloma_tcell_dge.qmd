---
title: "Identify granuloma associated T cell genes and validate in single-cell data"
format: html
editor:
  renderView: html
  sourceView: source
---

## Data

This TB hackday script uses (pre-processed) RNA sequencing data from the following study to identify granuloma-associated T cell genes:

1.  [Foreman et al. 2023](https://pubmed.ncbi.nlm.nih.gov/37097292/) (*J Exp Med*) **CD30 co-stimulation drives differentiation of protective T cells during Mycobacterium tuberculosis infection**

Then the expression of these genes can be further examined and validated using pseudo-bulk transcriptomic data from scRNAseq data in this study:

1.  [Bromley et al. 2024](https://pubmed.ncbi.nlm.nih.gov/39214090/) (Immunity) **CD4+ T cells re-wire granuloma cellularity and regulatory networks to promote immunomodulation following Mtb reinfection**

## Background

Foreman et al. compared the gene expression of T cells isolated from PBMC vs. T cells from granulomas (n=4 NHP, n=23 granulomas). They identified genes that were associated with granuloma T cells, and specifically identied genes that were correlated with Mtb burden in the granuloma (CFU).

![Foreman et al. 2023 Granuloma-associated T cell genes](assets/foreman_jem_fig2.png)

## Hypotheses for hacking

 - Identify genes that are associated with CD4 or CD8 T cells in granulomas and validate their expression in the clusters of granuloma T cells in the Bromley et al. study.
 - Are there genes associated with low-CFU granulomas in Foreman et al. that validate in Bromley et al.?

## Setup R and load the data.

Load relevant packages. Change `<data_dir>` variable as appropriate.

Load the pre-processed RNA sequencing data. There are two important files:

1.  `foreman_et_al_counts.csv` contains log2-transformed counts per million (log2-CPM), that were computed from raw counts by the study authors. The table contains 84 columns, with one column `gene_id` and the remaining columns matching `sampleid`s in the metadata. There are 30,689 genes in the dataset.

2.  `foreman_etal_meta.csv` contains all the 83 sample- and granuloma-level metadata that is available for these samples and animals. There are 27 CD8+ T cell samples sorted from granulomas and 31 CD4+ T cell samples sorted from granulomas. Other variables include `subject`, `sort`, `condition`, `sex`, and granuloma `CFU`.

```{r}
#| warning: false
library(readr)
library(tidyverse)
library(edgeR)
library(kimma)
library(ggplot2)
library(dplyr)
library(ggrepel)

# NOTE --- REPLACE the <data_dir> FOLDER DESTINTATION AS APPROPRIATE

data_dir <- '/fh/fast/gilbert_p/fg_data/SEATRAC/TB_hackday_2024/processed_data'

# These are already log2-CPM
ncts <- readr::read_csv(file.path(data_dir, "foreman_etal_counts.csv"))
meta <- readr::read_csv(file.path(data_dir, "foreman_etal_meta.csv"))

```

## Prepare the data for differential gene expression analysis

The `sampleid` columns of the `ncts` variable and the rows of `sampleid` in the `meta` variable match. For this first analysis we will focus on the CD8 T cells sorted from PBMC or granulomas, creating subset tables indicated by `_ss` variables. Then we initialize the `DGEList` object and create a `limma` `voom` model with a design matrix to identify genes that are associated with granuloma Mtb burden (CFU).

In the accompanying "mean-variace" plot the x-axis represents the average expression levels of genes across all samples. The y-axis represents the square-root of the variance (i.e., standard deviation) of gene expression levels. It shows how the variance changes with respect to the mean expression. Every dot is a gene and the trend line shows the relationship between the mean and the variance. Note that the variance is relatively stable across expression levels and the relationship is smooth; this is good for analysis and `voom` will use this relationship to adjust the model fits of each gene. If you re-run the code block without the filtering you will see the impact on the mean-variance plot.

```{r}
#| fig-width: 5
#| fig-height: 3

meta_ss = meta %>% filter(condition == "CD8_gran")
keep_ids = meta_ss %>% pull(sampleid)
keep_ids = c('gene_id', keep_ids)

ncts_ss = ncts %>% select(any_of(keep_ids))

# Discard genes that have low counts/prevalence
filter = rowSums(ncts_ss > 1) >= (0.5 * ncol(ncts_ss))
ncts_ss = ncts_ss[filter, ]

# Create the object for differential expression testing
dge_o = DGEList(counts=ncts_ss,
                genes=ncts_ss[, 1],
                samples=meta_ss,
                group=meta_ss[['CFU']])

# Compute weights
# ncts_ss <- calcNormFactors(dge_o, method = "TMM")

# Specify the model/design matrix
design_temp = model.matrix(~CFU, data=meta_ss)

# Create the voom object and fit the model
v <- voom(dge_o, design=design_temp, plot=TRUE)
```

## Fit the model to identify genes associated with protection

```{r}
# vvwts <- voomWithQualityWeights(dge_o, design=design_temp, normalize.method="none", plot=TRUE)
fit = lmFit(v, design_temp)

# Estimate contrasts and p-values
fit = eBayes(fit, robust=TRUE)

summary(decideTests(fit, adjust.method="fdr", p.value = 0.05))

results <- topTable(fit, adjust="BH", coef="CFU", p.value=1, number=Inf, resort.by="P")

head(results %>% select(gene_id, logFC, AveExpr, P.Value, adj.P.Val), 20)
```

## Create a volcano plot for single-gene association with protection

```{r}
#| fig-width: 5
#| fig-height: 3

# Add a column for significance based on FDR
results <- results %>%
  mutate(Significance = ifelse(adj.P.Val < 0.2, "Significant", "Not Significant"))

# Select the top 10 genes based on adjusted p-value for labeling
top_genes <- results %>%
  arrange(adj.P.Val) %>%
  slice_head(n = 10)

max_logFC <- max(abs(results$logFC), na.rm = TRUE)

# Create the volcano plot
volcano_plot <- ggplot(results, aes(x = logFC, y = -log10(P.Value))) +
  geom_point(aes(color = Significance), alpha = 0.6) +
  scale_color_manual(values = c("Significant" = "red", "Not Significant" = "grey")) +
  geom_text_repel(data = top_genes,
                  aes(label = gene_id),
                  max.overlaps = 10,
                  box.padding = 0.3,
                  point.padding = 0.3,
                  segment.color = "grey50",
                  size = 3) +
  xlim(c(-max_logFC, max_logFC)) +
  theme_minimal() +
  labs(
    x = "log2 Fold-change",
    y = "-log10 P-value",
    color = "FDR < 0.05") +
  theme(plot.title = element_text(hjust = 0.5))

volcano_plot
```

## Redo the analysis using a mixed-effects model to incorporate data from additional visits and account for the longitudinal design

```{r}
# Redo the analysis using a mixed-effects model to account for the longitudinal design

dge_o = DGEList(counts=ncts_ss,
                genes=ncts_ss[, 1],
                samples=meta_ss,
                group=meta_ss[['CFU']])

ncts_ss <- calcNormFactors(dge_o, method = "TMM")

design_temp=model.matrix(~CFU, data=meta_ss)

v <- voom(dge_o, design=design_temp, plot=FALSE)

# Can't figure out why I get this error here
# lme/lmerel model: expression~protect_outcome+sex+visit+(1|animalid)
# Error in `[.data.frame`(weights.format, order(rownames(weights.format)),  : 
#                           undefined columns selected

#klm <- kmFit(dat = v,
#             model = "~CFU + (1|subject)",
#             run_lme = TRUE,
#             libraryID="sampleid",
#             patientID="subject",
#             use_weights = TRUE,
#             metrics = TRUE,
#             run_contrast = FALSE,
#             processors=1)

#summarise_kmFit(fdr = klm$lm)

#plot_volcano(model_result = klm, 
#             model = "lme", variables = "CFU",
#             y_cutoff = 0.05)
```