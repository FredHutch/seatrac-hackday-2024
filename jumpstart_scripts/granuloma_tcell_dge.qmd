---
title: "Identify granuloma associated T cell genes and validate in single-cell data"
format:
  html:
    toc: true
    self-contained: true
editor:
  renderView: html
  sourceView: source
---

## Data

This TB Hackday script uses (pre-processed) RNA sequencing data from the following study to identify granuloma-associated T cell genes:

1.  [Foreman et al. 2023](https://pubmed.ncbi.nlm.nih.gov/37097292/) (*J Exp Med*) **CD30 co-stimulation drives differentiation of protective T cells during Mycobacterium tuberculosis infection**

Then the expression of these genes can be further examined and validated using pseudo-bulk transcriptomic data from scRNAseq data in this study:

1.  [Bromley et al. 2024](https://pubmed.ncbi.nlm.nih.gov/39214090/) (Immunity) **CD4+ T cells re-wire granuloma cellularity and regulatory networks to promote immunomodulation following Mtb reinfection**

## Background

Foreman et al. compared the gene expression of T cells isolated from PBMC vs. T cells from granulomas (n=4 NHP, n=23 granulomas). They identified genes that were associated with granuloma T cells, and specifically identified genes that were correlated with Mtb burden in the granuloma (CFU).

![Foreman et al. 2023 Granuloma-associated T cell genes](assets/foreman_jem_fig2.png)

Bromley et al. report on an experiment with three groups of cynomolgus macaques: (1) anti-CD4 treated, Mtb-exposed (n=7), (2) IgG control, Mtb-exposed (n=6), (3) No treatment, Mtb-naive (n=6). Groups (2) and (3) were infected with Mtb, then given an anti-CD4 antibody to deplete CD4+ T cells or an isotype control (IgG) antibody, and finally challenged with a secondary Mtb infection. Group 3 only received a primary Mtb infection. Granulomas were then analyzed using single-cell RNAseq, with 3 NHP from (1) and 2 NHP from (2) and (3) each. We have created pseudo-bulk datasets using two different clustering of the cells, offering two levels of cell type granularity for analysis: `bromley_X_pseudobulk_counts.csv` where `X` is `coarse` or `subclustering`, with clusters defined by the authors of the manuscript. By analyzing data from primary infection, reinfection, and reinfection-CD4+ T cell-depleted granulomas, they found that the presence of CD4+ T cells during reinfection resulted in a less inflammatory lung milieu characterized by reprogrammed CD8+ T cells, reduced neutrophilia, and blunted type 1 immune signaling among myeloid cells.

![Bromley et al. 2024 CD4+ T cells re-wire granuloma cellularity and regulatory networks to promote immunomodulation following Mtb reinfection](assets/bromley_etal_fig1.jpg)

## Hypotheses for hacking

 - Identify genes that are associated with CD4 or CD8 T cells in granulomas and validate their expression in the clusters of granuloma T cells in the Bromley et al. study
 - Are there genes associated with low-CFU granulomas in Foreman et al. that are also associated with low-CFU granulomas in Bromley et al.?

## Setup R and load the data.

Load relevant packages. Change `<data_dir>` variable as appropriate.

Load the pre-processed RNA sequencing data. There are several important files:

1.  `foreman_et_al_counts.csv` contains log2-transformed counts per million (log2-CPM), that were computed from raw counts by the study authors. The table contains 84 columns, with one column `gene_id` and the remaining columns matching `sampleid`s in the metadata. There are 30,689 genes in the dataset.

2.  `foreman_etal_meta.csv` contains all the 83 sample- and granuloma-level metadata that is available for these samples and animals. There are 27 CD8+ T cell samples sorted from granulomas and 31 CD4+ T cell samples sorted from granulomas. Other variables include `subject`, `sort`, `condition`, `sex`, and granuloma `CFU`.

3. `bromley_coarse_pseudobulk_counts.csv` is a long-form table containing counts for 33 granulomas from 7 NHP, with over 25K genes from 15 coarse clusters of cells from the granulomas (44 sub-clusters). There are columns for `biosample_id`, `CoarseClustering`, `counts` and `gene`. Counts are not log-normalized. Pseudo-bulk counts were created by summing the counts across all cells in a cluster for each sample.

4. `bromley_coarse_pseudobulk_counts.meta.csv` contains meta-data that can be joined to the counts data on `biosample_id`. Variables include `donor_id`, `Group`, `CFU` (for the granuloma), and `CoarseClustering`/`SubclusteringV2`. 

```{r}
#| warning: false
library(dplyr)       # For data manipulation
library(ggplot2)     # For data visualization
library(readr)       # For reading CSV/TSV files
library(tidyr)       # For reshaping data
library(stats)       # For basic statistical tests
library(multcomp)    # For multiple comparison corrections
library(lme4)        # For mixed-effects modeling
library(broom)       # For tidying model outputs
library(data.table)  # Efficient data handling

# NOTE --- REPLACE the <data_dir> FOLDER DESTINTATION AS APPROPRIATE

data_dir <- '/home/processed_data'

# These are already log2-CPM
ncts <- readr::read_csv(file.path(data_dir, "foreman_etal_counts.csv"))
meta <- readr::read_csv(file.path(data_dir, "foreman_etal_meta.csv"))

meta <- meta %>%
  mutate(logCFU = log10(CFU + 1))
```

## Identify genes that are associated with granuloma T cells

This analysis should match part of the analysis presented in Foremant et al. Figure 1. It's a bit of a strange statistical test because it compares gene expression in each granuloma T cell sort (n=31/27 for CD4/CD8) to gene expression in each PBMC sample (n=4), but we can use a rank-based test to find the genes that are differentially expressed in the two tissues. These will become candidate genes for downstream analysis, so statistical significance is not critical.

Steps for analysis:
1. Filter genes, keeping those that have at least 1 log-normalized count in 60% of the samples.
2. Filter to just the CD4 granuloma and PBMC samples (could alternatively focus on CD8)
3. Prepare the data as a matrix for computationally efficient testing
4. Apply Mann-Whitney test across all genes and collect the results
5. Print the top 20 results with an estimated FDR q-value

```{r}
# Section 4: Filter genes for analysis
# ------------------------------------
ltpm <- ncts %>%
  column_to_rownames("gene_id") %>%
  filter(rowMeans(. > 1) > 0.6)

genes <- rownames(ltpm)

# Merge metadata and log-transformed counts
meta_ss <- meta %>%
  filter(condition %in% c("CD4_gran", "CD4_PBMC")) %>%
  column_to_rownames("sampleid")

# Ensure `ltpm` only includes columns for the filtered samples
ltpm_ss <- ltpm %>%
  select(all_of(rownames(meta_ss)))

mdf <- meta_ss %>%
  rownames_to_column("sampleid") %>%
  bind_cols(t(ltpm_ss))  # Ensure samples (columns of ltpm) match rows of meta

# Section 5: Mann-Whitney U Test for Gene Associations
# ----------------------------------------------------

# Convert mdf to a matrix for gene expression data
expression_data <- as.matrix(mdf %>% select(all_of(genes)))
conditions <- mdf$condition

# Precompute the grouping indices for faster sub-setting
gran_idx <- which(conditions == "CD4_gran")
pbmc_idx <- which(conditions == "CD4_PBMC")

# Vectorized function to compute statistics for all genes
collect_res_matrix <- function(expression_data, gran_idx, pbmc_idx, genes) {
      gran_expr <- expression_data[gran_idx, , drop = FALSE]
      pbmc_expr <- expression_data[pbmc_idx, , drop = FALSE]
      
      # Perform Wilcoxon tests in bulk
      pvalues <- apply(expression_data, 2, function(gene_expr) {
        wilcox.test(gene_expr[gran_idx], gene_expr[pbmc_idx])$p.value
      })
      
      # Calculate mean differences
      mean_gran <- colMeans(gran_expr, na.rm = TRUE)
      mean_pbmc <- colMeans(pbmc_expr, na.rm = TRUE)
      mean_diff <- mean_gran - mean_pbmc
      
      # Assign "GRAN" or "PBMC" based on the mean difference
      assoc <- ifelse(mean_diff > 0, "GRAN", "PBMC")
      
      # Combine results into a data frame
      results <- data.frame(
        gene = genes,
        pvalue = pvalues,
        assoc = assoc,
        stringsAsFactors = FALSE
      )
      
      return(results)
    }

# Run the matrix-optimized function
results_df <- collect_res_matrix(expression_data, gran_idx, pbmc_idx, genes)

# Adjust p-values for multiple comparisons
results_df <- results_df %>%
  mutate(FDRq = p.adjust(pvalue, method = "fdr")) %>%
  arrange(pvalue)

# Other genes of interest from the manuscript
cd4_genes <- c("KLRB1", "CD40LG", "S100A11", "S100A4", "IL26", "BATF")
cd8_genes <- c("APOBEC3G", "IFNG", "TNF", "CCL1", "CCL20")

gran_genes <- results_df %>%
  filter(FDRq < 0.1) %>%
  filter(assoc == 'GRAN') %>%
  pull(gene)

print(head(results_df, 20))
```

## Fit the model to identify genes associated with protection (lower CFU)

Now we will test the granuloma-associated genes to see if they are associated with protection.

The `sampleid` columns of the `ncts` variable and the rows of `sampleid` in the `meta` variable match. For this first analysis we will focus on the CD8 T cells sorted from PBMC or granulomas, creating subset tables indicated by `_ss` variable. Then we initialize the `DGEList` object and create a `limma-voom` model with a design matrix to identify genes that are associated with granuloma Mtb burden (CFU).

In the accompanying "mean-variance" plot the x-axis represents the average expression levels of genes across all samples. The y-axis represents the square-root of the variance (i.e., standard deviation) of gene expression levels. It shows how the variance changes with respect to the mean expression. Every dot is a gene and the trend line shows the relationship between the mean and the variance. Note that the variance is relatively stable across expression levels and the relationship is smooth; this is good for analysis and `voom` will use this relationship to adjust the model fits of each gene. If you re-run the code block without the filtering you will see the impact on the mean-variance plot.

```{r}
#| fig-width: 5
#| fig-height: 3

meta_ss = meta %>% filter(condition == "CD4_gran")
keep_ids = meta_ss %>% pull(sampleid)
keep_ids = c('gene_id', keep_ids)

ncts_ss = ncts %>% dplyr::select(any_of(keep_ids))

# Keep only the genes from 
ncts_ss <- ncts_ss %>%
        filter(gene_id %in% gran_genes)

# FOR TESTING ALL GENES: alternatively, discard genes that have low counts/prevalence
# filter = rowSums(ncts_ss > 1) >= (0.5 * ncol(ncts_ss))
# ncts_ss = ncts_ss[filter, ]

# Create the object for differential expression testing
dge_o = DGEList(counts=ncts_ss,
                genes=ncts_ss[, 1],
                samples=meta_ss,
                group=meta_ss[['logCFU']])

# Specify the model/design matrix
design_temp = model.matrix(~logCFU, data=meta_ss)

# Create the voom object and fit the model
v <- voomWithQualityWeights(dge_o, design=design_temp, plot=TRUE)
fit = lmFit(v, design_temp)

# Estimate contrasts and p-values
fit = eBayes(fit, robust=TRUE)

summary(decideTests(fit, adjust.method="fdr", p.value = 0.05))

results <- topTable(fit, adjust="BH", coef="logCFU", p.value=1, number=Inf, resort.by="P")

head(results %>% dplyr::select(gene_id, logFC, AveExpr, P.Value, adj.P.Val), 20)
```

## Create a volcano plot for single-gene association with protection

```{r}
#| fig-width: 5
#| fig-height: 3

# Add a column for significance based on FDR
results <- results %>%
  mutate(Significance = ifelse(adj.P.Val < 0.2, "Significant", "Not Significant"))

# Select the top 10 genes based on adjusted p-value for labeling
top_genes <- results %>%
  arrange(adj.P.Val) %>%
  slice_head(n = 10)

max_logFC <- max(abs(results$logFC), na.rm = TRUE)

# Create the volcano plot
volcano_plot <- ggplot(results, aes(x = logFC, y = -log10(P.Value))) +
  geom_point(aes(color = Significance), alpha = 0.6) +
  scale_color_manual(values = c("Significant" = "red", "Not Significant" = "grey")) +
  geom_text_repel(data = top_genes,
                  aes(label = gene_id),
                  max.overlaps = 10,
                  box.padding = 0.3,
                  point.padding = 0.3,
                  segment.color = "grey50",
                  size = 3) +
  xlim(c(-max_logFC, max_logFC)) +
  theme_minimal() +
  labs(
    x = "log2 Fold-change",
    y = "-log10 P-value",
    color = "FDR < 0.05") +
  theme(plot.title = element_text(hjust = 0.5))

volcano_plot
```

## Redo the analysis using a mixed-effects model to incorporate data from additional visits and account for the longitudinal design

```{r}
# Redo the analysis using a mixed-effects model to account for the longitudinal design
dge_o = DGEList(counts=ncts_ss,
                genes=ncts_ss[, 1],
                samples=meta_ss,
                group=meta_ss[['logCFU']])

ncts_ss <- calcNormFactors(dge_o, method = "TMM")

design_temp=model.matrix(~logCFU, data=meta_ss)

v <- voomWithQualityWeights(dge_o, design=design_temp, plot=FALSE)

klm <- kmFit(dat = v,
             model = "~logCFU + (1|subject)",
             run_lme = TRUE,
             libraryID="sampleid",
             patientID="subject",
             use_weights = TRUE,
             metrics = TRUE,
             run_contrast = FALSE,
             processors=1)

summarise_kmFit(fdr = klm$lme)

plot_volcano(model_result = klm,
             model = "lme", variables = "logCFU",
             y_cutoff = 0.05)

```


## Visulize results for a single gene

```{r}
# Scatter-plot of Gene Expression vs. log-CFU
gene <- "TNFRSF4"

ggplot(mdf, aes_string(x = "logCFU", y = gene)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ x) +
  labs(
    title = paste("Correlation of", gene, "with logCFU"),
    x = "logCFU",
    y = paste("Expression of", gene)
  ) +
  theme_minimal()

# Boxplot of Gene Expression by Condition
ggplot(mdf, aes_string(x = "condition", y = gene)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.7) +
  labs(
    title = paste("Expression of", gene, "by Condition"),
    x = "Condition",
    y = paste("Expression of", gene)
  ) +
  theme_minimal()
```
## Use the Bromley et al. data to identify cells that express protective genes and validate their association with protection

We can use the Bromley

```{r}
# Load Bromley data
brom <- read_csv(file.path(data_dir, "bromley_coarse_pseudobulk_counts.csv"))
bmeta <- read_csv(file.path(data_dir, "bromley_coarse_pseudobulk_counts.meta.csv"))

# Rename columns for consistency
bmeta <- bmeta %>%
  rename(CFU = `CFU Total`) %>%
  mutate(logCFU = log10(CFU + 1))

# Visualize distribution of logCFU
ggplot(bmeta, aes(x = logCFU)) +
  geom_density(fill = "blue", alpha = 0.3) +
  labs(title = "Distribution of logCFU", x = "logCFU", y = "Density") +
  theme_minimal()

# Define function to preprocess gene-specific data
prepare_ss <- function(gene) {
  ss <- brom %>% filter(gene == !!gene)  # Subset for the specific gene
  tot <- ss %>%
    group_by(biosample_id) %>%
    summarize(tot = sum(counts), .groups = "drop")
  
  ss <- ss %>%
    left_join(tot, by = "biosample_id") %>%
    left_join(bmeta, by = c("biosample_id", "CoarseClustering")) %>%
    mutate(
      lcpm = log2((counts + 0.01) / tot),
      cpm = counts / tot
    )
  
  return(ss)
}

# Perform Spearman correlation for CD4 and CD8 genes
cd4_genes <- c("TNFRSF4", "KLRB1", "CD40LG", "S100A11", "S100A4", "IL26", "BATF")
cd8_genes <- c("APOBEC3G", "IFNG", "TNF", "CCL1", "CCL20")

gene_list <- c(cd4_genes, cd8_genes)

res <- lapply(gene_list, function(g) {
  ss <- prepare_ss(g)
  unique_clusters <- unique(ss$CoarseClustering)
  
  cluster_res <- lapply(unique_clusters, function(clust) {
    tmp <- ss %>% filter(CoarseClustering == clust)
    
    # Calculate Spearman correlation
    cor_res <- cor.test(tmp$cpm, tmp$logCFU, method = "spearman")
    data.frame(
      gene = g,
      cluster = clust,
      n = nrow(tmp),
      rho = cor_res$estimate,
      pvalue = cor_res$p.value
    )
  })
  
  do.call(rbind, cluster_res)
})

# Combine results into a single data frame
res_df <- do.call(rbind, res) %>%
  arrange(pvalue) %>%
  mutate(FDRq = p.adjust(pvalue, method = "fdr"))

print(res_df)
```

```{r}
# Extract the top gene and cluster
top_gene <- res_df$gene[1]
top_cluster <- res_df$cluster[1]

# Prepare data for visualization
ss <- prepare_ss(top_gene)

# Ensure Group has the specified ordering
ss <- ss %>%
  mutate(Group = factor(Group, levels = c("IgG", "antiCD4", "Naïve")))

# Visualization: Boxplot with stripplot overlay
ggplot(ss, aes(x = cpm, y = CoarseClustering, color = Group)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(position = position_jitterdodge(jitter.width = 0.2), alpha = 0.7) +
  labs(
    title = paste("Expression of", top_gene, "by Coarse Clustering"),
    x = paste(top_gene, "expression (log2-CPM)"),
    y = "Coarse Clustering"
  ) +
  theme_minimal()
```

```{r}
# Visualization: Scatterplot of cpm vs logCFU for the top cluster
ss_top <- ss %>% filter(CoarseClustering == top_cluster)

ggplot(ss_top, aes(x = cpm, y = logCFU)) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  labs(
    title = paste("Scatterplot of", top_gene, "expression in", top_cluster),
    x = paste(top_gene, "expression (log2-CPM)"),
    y = "logCFU"
  ) +
  theme_minimal()
  ```
